(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{89:function(e,v,_){"use strict";_.r(v);var o=_(0),c=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"promises-a"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#promises-a","aria-hidden":"true"}},[e._v("#")]),e._v(" Promises/A+")]),_("h2",{attrs:{id:"什么是prmoises-a-标准"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是prmoises-a-标准","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是Prmoises/A+标准")]),_("p",[e._v("为实现者提供了一种"),_("code",[e._v("合理的,可实现的")]),e._v("JavaScript Promise 标准")]),_("p",[e._v("一个Promise表示异步操作的最终结果。与Promise交互的主要方式是通过它的"),_("code",[e._v("then")]),e._v("方法，它注册回调以接收Promise最终值或Promise不能被解决的原因.")]),_("p",[e._v("该规范详细说明了"),_("code",[e._v("then")]),e._v("方法的行为，为所有符合Promise/A+规范的Promise实现提供了一个互操作的基础。因此，规范应被认为是非常稳定的。")]),_("p",[e._v("核心Promise/A+规范不涉及如何create、fulfill或reject Promise，而是专注于提供一种可互操作的"),_("code",[e._v("then")]),e._v("方法。")]),_("h2",{attrs:{id:"_1-术语"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-术语","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.术语")]),_("ol",[_("li",[_("code",[e._v("Promise")]),e._v("是一个行为符合规范且有一个then方法的对象或者方法")]),_("li",[_("code",[e._v("thenable")]),e._v("是一个定义了有then的方法或者对象")]),_("li",[_("code",[e._v("value")]),e._v("是任何合法的js值(包括undefined,"),_("code",[e._v("thenable")]),e._v("或者"),_("code",[e._v("promise")]),e._v(")")]),_("li",[_("code",[e._v("exception")]),e._v("是用"),_("code",[e._v("throw")]),e._v("抛出的值")]),_("li",[_("code",[e._v("reason")]),e._v(",用来指示"),_("code",[e._v("promise")]),e._v("为什么被拒绝的一个值")])]),_("h2",{attrs:{id:"_2-须知"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-须知","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.须知")]),_("h3",{attrs:{id:"_2-1-promise的状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-promise的状态","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1 Promise的状态")]),_("p",[e._v("一个Promise必须且只能处在下列状态中的一个:")]),_("ol",[_("li",[_("code",[e._v("pending")]),e._v(" 挂起\n"),_("ol",[_("li",[e._v("当处在这个状态时,"),_("code",[e._v("promise")]),e._v("可以转变到"),_("code",[e._v("fulfilled")]),e._v("或者"),_("code",[e._v("rejected")]),e._v("状态")])])]),_("li",[_("code",[e._v("fulfilled")]),e._v(" 解决\n"),_("ol",[_("li",[e._v("当处在这个状态时,"),_("code",[e._v("promise")]),e._v("不能转变到其他状态")]),_("li",[e._v("必须有一个不可改变的"),_("code",[e._v("value")]),e._v("被返回")])])]),_("li",[_("code",[e._v("rejected")]),e._v(" 拒绝\n"),_("ol",[_("li",[e._v("当处在这个状态时,"),_("code",[e._v("promise")]),e._v("不能转变到其他状态")]),_("li",[e._v("必须有一个不可改变的"),_("code",[e._v("reason")]),e._v("被返回")])])])]),_("p",[_("strong",[e._v("不可改变")]),e._v("意味着不变的恒等式(例如 ===),但并不是深度不变的")]),_("h3",{attrs:{id:"_2-2-then方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-then方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2 "),_("code",[e._v("then")]),e._v("方法")]),_("p",[e._v("一个"),_("code",[e._v("promise")]),e._v("必须提供一个"),_("code",[e._v("then")]),e._v("方法去访问它的当前或者最终的"),_("code",[e._v("value")]),e._v("或"),_("code",[e._v("reason")])]),_("p",[_("code",[e._v("promise")]),e._v("的"),_("code",[e._v("then")]),e._v("方法接受两个参数")]),_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[e._v("promise"),_("span",{attrs:{class:"token punctuation"}},[e._v(".")]),_("span",{attrs:{class:"token function"}},[e._v("then")]),_("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("onFulfilled"),_("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v("onRejected"),_("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),_("ol",[_("li",[_("code",[e._v("onFulfilled")]),e._v("与"),_("code",[e._v("onRejected")]),e._v("方法都是可选的参数\n"),_("ol",[_("li",[e._v("如果"),_("code",[e._v("onFulfilled")]),e._v("参数不是一个方法,它必须要被忽略")]),_("li",[e._v("如果"),_("code",[e._v("onRejected")]),e._v("参数不是一个方法,它必须要被忽略")])])]),_("li",[e._v("如果"),_("code",[e._v("onFulfilled")]),e._v("是一个方法\n"),_("ol",[_("li",[e._v("必须要保证它在"),_("code",[e._v("promise")]),e._v("被"),_("code",[e._v("fulfilled")]),e._v("之后被调用,而且需要有一个"),_("code",[e._v("value")]),e._v("做为第一个参数")]),_("li",[e._v("它必须不能在"),_("code",[e._v("promise")]),e._v("被"),_("code",[e._v("fulfilled")]),e._v("之前被调用")]),_("li",[e._v("它必须只能被调用一次")])])]),_("li",[e._v("如果"),_("code",[e._v("onRejected")]),e._v("是一个方法\n"),_("ol",[_("li",[e._v("必须要保证它在"),_("code",[e._v("promise")]),e._v("被"),_("code",[e._v("rejected")]),e._v("之后被调用,而且需要有一个"),_("code",[e._v("reason")]),e._v("做为第一个参数")]),_("li",[e._v("它必须不能在"),_("code",[e._v("promise")]),e._v("被"),_("code",[e._v("rejected")]),e._v("之前被调用")]),_("li",[e._v("它必须只能被调用一次")])])]),_("li",[_("code",[e._v("onFulfilled")]),e._v("或"),_("code",[e._v("onRejected")]),e._v("必须只能在"),_("code",[e._v("执行上下文")]),e._v("只包含"),_("strong",[e._v("平台代码")]),e._v("[3.1]的时候被执行")]),_("li",[_("code",[e._v("onFulfilled")]),e._v("或"),_("code",[e._v("onRejected")]),e._v("必须被做为函数来调用(即不包含它this值)[3.2]")]),_("li",[_("code",[e._v("then")]),e._v("可以在一个"),_("code",[e._v("promise")]),e._v("中被调用多次\n"),_("ol",[_("li",[e._v("如果/当一个"),_("code",[e._v("prmoise")]),e._v("被"),_("code",[e._v("fulfilled")]),e._v("之后,所有"),_("code",[e._v("onFulfilled")]),e._v("回调必须要按照其在"),_("code",[e._v("then")]),e._v("的注册顺序依次执行")]),_("li",[e._v("如果/当一个"),_("code",[e._v("prmoise")]),e._v("被"),_("code",[e._v("rejected")]),e._v("之后,所有"),_("code",[e._v("onRejected")]),e._v("回调必须要按照其在"),_("code",[e._v("then")]),e._v("的注册顺序依次执行")])])]),_("li",[_("code",[e._v("then")]),e._v("的执行结果必须是返回一个"),_("code",[e._v("promise")]),e._v("[3.3]"),_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[e._v("promise2 "),_("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v(" promise1"),_("span",{attrs:{class:"token punctuation"}},[e._v(".")]),_("span",{attrs:{class:"token function"}},[e._v("then")]),_("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("onFulfilled"),_("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" onRejected"),_("span",{attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),_("ol",[_("li",[e._v("如果"),_("code",[e._v("onFulfilled")]),e._v("或者"),_("code",[e._v("onRejected")]),e._v("返回了值"),_("code",[e._v("x")]),e._v(",则执行Promise的解析过程"),_("code",[e._v("[[Resolve]](promise2, x)")])]),_("li",[e._v("如果"),_("code",[e._v("onFulfilled")]),e._v("或者"),_("code",[e._v("onRejected")]),e._v("抛出了一个异常"),_("code",[e._v("e")]),e._v(",则"),_("code",[e._v("prmoise2")]),e._v("必须以"),_("code",[e._v("e")]),e._v("做为"),_("code",[e._v("reason")]),e._v("来执行"),_("code",[e._v("rejected")])]),_("li",[e._v("如果"),_("code",[e._v("onFulfilled")]),e._v("不是一个方法,而且"),_("code",[e._v("promise1")]),e._v("被"),_("code",[e._v("fulfilled")]),e._v(",则"),_("code",[e._v("Promise2")]),e._v("必须以"),_("code",[e._v("promise1")]),e._v("相同的"),_("code",[e._v("value")]),e._v("被"),_("code",[e._v("fulfilled")])]),_("li",[e._v("如果"),_("code",[e._v("onRejected")]),e._v("不是一个方法,而且"),_("code",[e._v("promise1")]),e._v("被"),_("code",[e._v("rejected")]),e._v(",则"),_("code",[e._v("Promise2")]),e._v("必须以"),_("code",[e._v("promise1")]),e._v("相同的"),_("code",[e._v("reason")]),e._v("被"),_("code",[e._v("rejected")])])])])]),_("h3",{attrs:{id:"_2-3-promise解析过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-promise解析过程","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3 Promise解析过程")]),_("p",[_("code",[e._v("Promise解析过程")]),e._v(" 是以一个"),_("code",[e._v("promise")]),e._v("和一个值做为参数的抽象过程，可表示为"),_("code",[e._v("[[Resolve]](promise, x)")]),e._v(". 过程如下；")]),_("ol",[_("li",[e._v("如果"),_("code",[e._v("promise")]),e._v(" 和 "),_("code",[e._v("x")]),e._v(" 指向相同的值, 使用 "),_("code",[e._v("TypeError")]),e._v("做为原因将"),_("code",[e._v("promise")]),e._v("拒绝。")]),_("li",[e._v("如果"),_("code",[e._v("x")]),e._v("是一个"),_("code",[e._v("promise")]),e._v(", 采用其状态[3.4]:\n"),_("ol",[_("li",[e._v("如果"),_("code",[e._v("x")]),e._v("是"),_("code",[e._v("pending")]),e._v("状态，promise必须保持"),_("code",[e._v("pending")]),e._v("走到"),_("code",[e._v("x")]),_("code",[e._v("fulfilled")]),e._v("或"),_("code",[e._v("rejected")])]),_("li",[e._v("如果"),_("code",[e._v("x")]),e._v("是"),_("code",[e._v("fulfilled")]),e._v("状态，将"),_("code",[e._v("x")]),e._v("的值用于"),_("code",[e._v("fulfill promise")])]),_("li",[e._v("如果"),_("code",[e._v("x")]),e._v("是"),_("code",[e._v("rejected")]),e._v("状态, 将"),_("code",[e._v("x")]),e._v("的原因用于"),_("code",[e._v("reject promise")])])])]),_("li",[e._v("如果"),_("code",[e._v("x")]),e._v("是一个对象或者方法\n"),_("ol",[_("li",[e._v("将"),_("code",[e._v("then")]),e._v("赋为"),_("code",[e._v("x.then")]),e._v("[3.5]")]),_("li",[e._v("如果在取"),_("code",[e._v("x.then")]),e._v("值时抛出了异常，则以这个异常做为原因将"),_("code",[e._v("promise")]),e._v("拒绝")]),_("li",[e._v("如果"),_("code",[e._v("then")]),e._v("是一个函数，以"),_("code",[e._v("x")]),e._v("为"),_("code",[e._v("this")]),e._v("调用"),_("code",[e._v("then")]),e._v("函数，且第一个参数是"),_("code",[e._v("resolvePromise")]),e._v("，第二个参数是"),_("code",[e._v("rejectPromise")]),_("ol",[_("li",[e._v("当 "),_("code",[e._v("resolvePromise")]),e._v(" 被以 "),_("code",[e._v("y")]),e._v("为参数调用, 执行 "),_("code",[e._v("[[Resolve]](promise, y)")])]),_("li",[e._v("当 "),_("code",[e._v("rejectPromise")]),e._v(" 被以 "),_("code",[e._v("r")]),e._v(" 为参数调用, 则以"),_("code",[e._v("r")]),e._v("为原因将"),_("code",[e._v("promise")]),e._v("拒绝。")]),_("li",[e._v("如果 "),_("code",[e._v("resolvePromise")]),e._v(" 和 "),_("code",[e._v("rejectPromise")]),e._v(" 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略。")]),_("li",[e._v("如果在调用then时抛出了异常，则：\n"),_("ol",[_("li",[e._v("如果 "),_("code",[e._v("resolvePromise")]),e._v(" 或 "),_("code",[e._v("rejectPromise")]),e._v(" 已经被调用了，则忽略它。")]),_("li",[e._v("否则, 以"),_("code",[e._v("e")]),e._v("为"),_("code",[e._v("reason")]),e._v("将 "),_("code",[e._v("promise")]),e._v(" 拒绝。")])])])])]),_("li",[e._v("如果 "),_("code",[e._v("then")]),e._v("不是一个函数，则 以"),_("code",[e._v("x")]),e._v("为值"),_("code",[e._v("fulfill promise")]),e._v("。")])])]),_("li",[e._v("如果 "),_("code",[e._v("x")]),e._v(" 不是对象也不是函数，则以x为值"),_("code",[e._v("fulfill promise")]),e._v("。")])]),_("p",[e._v("如果一个"),_("code",[e._v("promise")]),e._v("以一个"),_("code",[e._v("thenable")]),e._v("被"),_("code",[e._v("resolved")]),e._v("并且参与到了一个循环的"),_("code",[e._v("thenable")]),e._v("链,这样会导致无线的递归循环.鼓励但并不是必须的,如果检测到此类型的递归,可以以"),_("code",[e._v("TypeError")]),e._v("做为理由拒绝这个"),_("code",[e._v("promise")]),e._v("[3.6]")]),_("h2",{attrs:{id:"_3-提示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-提示","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.提示")]),_("ul",[_("li",[e._v("3.1 平台代码:js引擎,环境与promise的实现代码.在实践中,此要求确保在调用"),_("code",[e._v("then")]),e._v("方法的"),_("code",[e._v("event loop")]),e._v("之后,以一个全新的栈异步的执行"),_("code",[e._v("onFulfilled")]),e._v("与"),_("code",[e._v("onRejected")]),e._v(".这可以用"),_("code",[e._v("macro-task 宏任务")]),e._v("(例如:"),_("code",[e._v("setTimeout")]),e._v("或"),_("code",[e._v("setImmediate")]),e._v("),或"),_("code",[e._v("micro-task 微任务")]),e._v("(例如:"),_("code",[e._v("MutationObserver")]),e._v("或"),_("code",[e._v("process.nextTick")]),e._v(")来实现.由于"),_("code",[e._v("Promise")]),e._v("本身本认为是"),_("strong",[e._v("平台代码")]),e._v(",它可能自身包含了任务调度队列或者被称为那些被调用的处理句柄的"),_("code",[e._v("蹦床")])]),_("li",[e._v("3.2 这意思是,在严格模式下,"),_("code",[e._v("this")]),e._v("将会是"),_("code",[e._v("undefined")]),e._v(",在普通模式下,"),_("code",[e._v("this")]),e._v("会指向"),_("code",[e._v("global object")]),e._v("(浏览器中是window)")]),_("li",[e._v("3.3 每一份"),_("code",[e._v("Promise")]),e._v("的实现可以允许"),_("code",[e._v("promise2 === promise1")]),e._v(" ,只要该实现满足所有的要求.每一份实现都应该证明其能否支持"),_("code",[e._v("promise2 === promise1")]),e._v(",并且是在什么条件下.")]),_("li",[e._v("3.4 通常情况下只,如果x来自于当前的实现,它可以被认为是一个真正的"),_("code",[e._v("promise")]),e._v(".这个条款允许我们使用实现指定的方法去采用已知一致性"),_("code",[e._v("Promise")]),e._v("的状态.")]),_("li",[e._v("3.5 该过程首先存储对"),_("code",[e._v("x")]),e._v("的引用，然后测试该引用，然后调用该引用，从而避免对"),_("code",[e._v("x.then")]),e._v("属性的多次访问。这样的预防措施对于确保访问器属性的一致性是重要的，访问者的属性可以在检索之间改变。")]),_("li",[e._v("3.6 实现不应该设置对递归的深度做出限制,超出极限的递归应该被认为是无限递归,只有真正的循环导致一个"),_("code",[e._v("TyepError")]),e._v(".如果一个无限循环发生了.那无穷的递归也是正确的做法")])]),_("p",[e._v("原文参考地址: "),_("a",{attrs:{href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("promise/A+规范")])]),_("p",[e._v("如果需要了解其中每一条的实现可以参考官方"),_("a",{attrs:{href:"https://github.com/promises-aplus/promises-tests/tree/master/lib/tests",target:"_blank",rel:"noopener noreferrer"}},[e._v("测试代码")])])])}],!1,null,null,null);v.default=c.exports}}]);