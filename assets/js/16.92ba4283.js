(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{52:function(t,e,s){t.exports=s.p+"assets/img/event-loop.80f6e345.jpg"},53:function(t,e,s){t.exports=s.p+"assets/img/excute-stack.2f761eb8.gif"},82:function(t,e,s){"use strict";s.r(e);var i=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"js的事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js的事件循环机制","aria-hidden":"true"}},[this._v("#")]),this._v(" JS的事件循环机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("文章大部分内容引用"),e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/33058983",title:"详解JavaScript中的Event Loop（事件循环）机制",target:"_blank",rel:"noopener noreferrer"}},[this._v("详解JavaScript中的Event Loop（事件循环）机制")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"单线程-非阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单线程-非阻塞","aria-hidden":"true"}},[this._v("#")]),this._v(" 单线程,非阻塞")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("单线程意味着，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("而非阻塞则是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，主线程会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[e("strong",[this._v("现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了web worker技术。这项技术号称让javascript成为一门多线程语言。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[e("strong",[this._v("然而，使用web worker技术开的多线程有着诸多限制，例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("js引擎就是通过"),e("strong",[this._v("Event Loop")]),this._v("来实现这一点")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"执行栈与事件队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行栈与事件队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 执行栈与事件队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"执行栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行栈","aria-hidden":"true"}},[this._v("#")]),this._v(" 执行栈")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("方法的私有作用域")]),e("li",[this._v("上层作用域的指向")]),e("li",[this._v("方法的参数")]),e("li",[this._v("作用域中定义的变量")]),e("li",[this._v("作用域的this对象的绑定")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是当一系列方法被依次调用的时候,\n由于js是单线程,同一时间只能执行一个方法,所以这些方法会依次被排队在一个被称为"),e("code",[this._v("执行栈")]),this._v("的地方")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(53),alt:"执行栈"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("(所以当遇到递归或者死循环的情况下经常会发生栈溢出的异常,这个栈就是指的"),e("code",[this._v("执行栈")]),this._v(",执行栈的上限依不同浏览器而定)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("span",{staticStyle:{color:"red"}},[this._v("记住执行栈,有五个关键点")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("单线程")]),e("li",[this._v("同步执行")]),e("li",[this._v("一个全局环境")]),e("li",[this._v("无限的函数环境")]),e("li",[this._v("函数被调用就会创建一个新的执行环境，甚至调用自己。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"事件队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("js非阻塞特性的实现所依赖的机制就是"),e("code",[this._v("事件队列(Task Queue)")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("当js遇到异步事件后并不会等待起结果返回,而是会将这个事件挂起,继续执行"),s("code",[t._v("执行栈")]),t._v("中的其他任务,\n当一个异步事件返回结果后,js会将这个事件放入与当前"),s("code",[t._v("执行栈")]),t._v("不同的另一个队列,这个事件称为"),s("code",[t._v("事件队列(Task Queue)")]),t._v("\n当主线程处于"),s("code",[t._v("闲置")]),t._v("状态的时候,主线程回去查找事件队列是否有任务.如果有,主线程则会取出其中排第一的事件并把这个事件的回调函数放入执行栈中,然后执行.这个循环的就叫做"),s("code",[t._v("事件循环(Event Loop)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:s(52),alt:"执行栈"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("stack即执行栈")]),e("li",[this._v("callback queue即事件队列")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"异步任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步任务","aria-hidden":"true"}},[this._v("#")]),this._v(" 异步任务")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("微任务(micro task) (高优先级)\n"),e("ul",[e("li",[this._v("Promise()")]),e("li",[this._v("MutationObserver()")])])]),e("li",[this._v("宏任务(macro task)\n"),e("ul",[e("li",[this._v("setInterval()")]),e("li",[this._v("setTimeout()")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("注意")]),e("p",[this._v("当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。")])])}],r=s(0),a=Object(r.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),s("p",[t._v("javascript从诞生之日起就是一门单线程的非阻塞的脚本语言")]),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),s("p",[t._v("当javascript代码执行的时候会将不同的变量存于内存中的不同位置：堆（heap）和栈（stack）中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。")]),s("p",[t._v("当我们调用一个方法的时候,js会生成一个与这个方法对于的"),s("router-link",{attrs:{to:"./excute-context.html"}},[t._v("执行环境(context)")]),t._v("又称执行上下文.这个上下文包含了")],1),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),s("p",[t._v("执行栈所说的都是同步代码的执行,那么当一个异步代码(Ajax,Promise)执行后又是如何?这里便提现了js的非阻塞的特性")]),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),s("p",[t._v("异步任务之间并不相同,他们的优先级也有区别,异步任务分为两类")]),t._m(22),t._m(23)])},i,!1,null,null,null);e.default=a.exports}}]);